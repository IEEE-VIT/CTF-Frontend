{"version":3,"sources":["uiComponents/globe/globe_dark.jpg","uiComponents/globe/markers.ts","uiComponents/globe/globe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","markers","id","city","color","coordinates","value","globe2","require","Globe","state","focus","undefined","useState","globe","setGlobe","className","onClick","arr","a","parseInt","Math","random","length","setState","console","log","size","globeOptions","cloudsOpacity","enableClouds","texture","cameraOptions","enableZoom","distanceRadiusScale","maxDistanceRadiusScale","zoomSpeed","autoRotateSpeed","enableAutoRotate","enableRotate","rotateSpeed","lightOptions","pointLightColor","pointLightIntensity","pointLightPositionRadiusScales","this","focusOptions","animationDuration","enableDefocus","markerOptions","activeScale","enableTooltip","enableGlow","enterAnimationDuration","enterEasingFunction","exitAnimationDuration","exitEasingFunction","getTooltipContent","marker","radiusScaleRange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,wC,4JC+C5BC,EA7CW,CACxB,CACEC,GAAI,EACJC,KAAM,YACNC,MAAO,MACPC,YAAa,CAAC,OAAQ,UACtBC,MAAO,IAET,CACEJ,GAAI,EACJC,KAAM,WACNC,MAAO,OACPC,YAAa,CAAC,UAAW,WACzBC,MAAO,IAET,CACEJ,GAAI,EACJC,KAAM,gBACNC,MAAO,SACPC,YAAa,CAAC,WAAY,YAC1BC,MAAO,IAET,CACEJ,GAAI,EACJC,KAAM,UACNC,MAAO,OACPC,YAAa,CAAC,QAAS,UACvBC,MAAO,KAET,CACEJ,GAAI,EACJC,KAAM,SACNC,MAAO,QACPC,YAAa,CAAC,QAAS,OACvBC,MAAO,IAET,CACEJ,GAAI,EACJC,KAAM,cACNC,MAAO,OACPC,YAAa,CAAC,SAAU,SACxBC,MAAO,KCjCLC,EAAOC,EAAQ,IAoGNC,E,YA/FX,aAAc,IAAD,8BACT,+CACKC,MAAM,CACPC,WAAOC,GAHF,E,yEAOD,IAAD,EACmBC,mBAASN,GAD5B,mBACAO,EADA,KACOC,EADP,KAEAD,EACPC,EAASR,K,+BAUJ,IAAD,OACJ,OACI,yBAAKS,UAAU,mBAMX,4BAAQC,QAAS,WAEb,IAAIC,EAAI,CACJ,CAAC,OAAQ,UACT,CAAC,UAAW,WACZ,CAAC,WAAY,YACb,CAAC,QAAS,UACV,CAAC,QAAS,OACV,CAAC,SAAU,UAEXC,EAAED,EAAIE,SAAUC,KAAKC,SAASJ,EAAIK,OAAQL,EAAIK,SAClD,EAAKC,SAAS,CACVb,MAAOQ,IAEXM,QAAQC,IAAIP,KAdhB,yBAgBA,kBAAC,IAAD,CACAQ,KAAM,CAAC,IAAK,KACZC,aAAc,CACVC,cAAe,GACfC,cAAc,EACdC,QAAQ,2FAEZC,cAAe,CACXC,YAAY,EACZC,oBAAqB,EACrBC,uBAAwB,GACxBC,UAAW,EACXC,gBAAiB,EACjBC,kBAAkB,EAClBC,cAAc,EACdC,YAAa,IAEjBC,aAAc,CACVC,gBAAiB,QACjBC,oBAAqB,EACrBC,+BAAgC,CAAC,EAAG,GAAI,IAE5CjC,MAAOkC,KAAKnC,MAAMC,MAClBmC,aAAc,CACVC,kBAAmB,IACnBb,oBAAqB,EAGrBc,eAAe,GAElB/C,QAASA,EAEVgD,cAAe,CACXC,YAAa,IACbC,eAAe,EACfC,YAAY,EAEZC,uBAAwB,IACxBC,oBAAqB,CAAC,SAAU,SAChCC,sBAAuB,IACvBC,mBAAoB,CAAC,QAAS,OAC9BC,kBAAmB,SAAAC,GAAM,gBAAOA,EAAOvD,KAAd,oBAA8BuD,EAAOpD,MAArC,SACzBqD,iBAAkB,CAAC,IAAM,a,GAvFzBC,IAAMC,WCEXC,G,uLARX,OACE,6BACE,kBAAC,EAAD,W,GALUF,IAAMC,YCOJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ea8c9627.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/globe_dark.daae3eb2.jpg\";","import { Marker } from 'react-globe';\n\nconst markers: Marker[] = [\n  {\n    id: 1,\n    city: 'Singapore',\n    color: 'red',\n    coordinates: [1.3521, 103.8198],\n    value: 50,\n  },\n  {\n    id: 2,\n    city: 'New York',\n    color: 'blue',\n    coordinates: [40.73061, -73.935242],\n    value: 25,\n  },\n  {\n    id: 3,\n    city: 'San Francisco',\n    color: 'orange',\n    coordinates: [37.773972, -122.431297],\n    value: 35,\n  },\n  {\n    id: 4,\n    city: 'Beijing',\n    color: 'gold',\n    coordinates: [39.9042, 116.4074],\n    value: 135,\n  },\n  {\n    id: 5,\n    city: 'London',\n    color: 'green',\n    coordinates: [51.5074, 0.1278],\n    value: 80,\n  },\n  {\n    id: 6,\n    city: 'Los Angeles',\n    color: 'gold',\n    coordinates: [29.7604, -95.3698],\n    value: 54,\n  },\n];\n\nexport default markers;\n","// import '../../assets/globe_dark.jpg';\nimport React, {useState} from 'react';\n\nimport ReactGlobe from 'react-globe';\nimport { defaultBarMarkerOptions, defaultDotMarkerOptions } from \"react-globe\";\n\nimport markers from './markers.ts';\n// import './planetaryjs.min.js';\n// var Planetaryjs=require('../../../node_modules/planetary.js');\n// import '../../../node_modules/planetary.js';\nconst globe2=require('./globe_dark.jpg');\n// const [globe, setGlobe] = useState(globe1);\nlet globee;\n\nclass Globe extends React.Component{\n    constructor(){\n        super();\n        this.state={\n            focus: undefined\n        };\n    }\n\n    something(){        \n        const [globe, setGlobe] = useState(globe2);\n        globee=globe;\n        setGlobe(globe2);\n    }\n    // buttonLay=()=>{\n    //     const [focus, setFocus] = useState(undefined);\n    //     return(\n    //         <div>\n    //             <button onClick={() => setFocus([1.3521, 103.8198])}>Singapore</button>\n    //         </div>\n    //     );\n    // }\n    render(){\n        return(            \n            <div className=\"globe-container\">\n                {/* <canvas id='globe' width='500' height='500' onClick={(event)=>{\n                    console.log(event);\n                    this.getOffset(event);\n                }}></canvas> */}\n                {/* Namastey Duniyaa! */}\n                <button onClick={()=>{\n                    // this.something();\n                    var arr=[\n                        [1.3521, 103.8198],\n                        [40.73061, -73.935242],\n                        [37.773972, -122.431297],\n                        [39.9042, 116.4074],\n                        [51.5074, 0.1278],\n                        [29.7604, -95.3698]\n                    ];\n                    var a=arr[parseInt((Math.random()*arr.length)%arr.length)]\n                    this.setState({\n                        focus: a\n                    });\n                    console.log(a);\n                }}>Change Focus Location</button>\n                <ReactGlobe \n                size={[900, 600]}\n                globeOptions={{\n                    cloudsOpacity: 0.6,\n                    enableClouds: false,\n                    texture: `https://raw.githubusercontent.com/chrisrzhou/react-globe/master/textures/globe_dark.jpg`,\n                }}\n                cameraOptions={{\n                    enableZoom: true,\n                    distanceRadiusScale: 5,\n                    maxDistanceRadiusScale: 15,\n                    zoomSpeed: 2,\n                    autoRotateSpeed: 1,\n                    enableAutoRotate: true,\n                    enableRotate: true,\n                    rotateSpeed: 0.5\n                }}\n                lightOptions={{\n                    pointLightColor: 'white',\n                    pointLightIntensity: 2,\n                    pointLightPositionRadiusScales: [2, 1, -1],\n                  }}\n                focus={this.state.focus}\n                focusOptions={{\n                    animationDuration: 3000,\n                    distanceRadiusScale: 3,\n                    // easingFunction: ['Elastic', 'In'],\n                    // easingFunction: ['Linear', 'None'],\n                    enableDefocus: false,\n                  }}\n                 markers={markers}\n                //  markerOptions={defaultDotMarkerOptions}\n                markerOptions={{\n                    activeScale: 1.1,\n                    enableTooltip: true,\n                    enableGlow: true,\n                    // glowCoefficient: 10,\n                    enterAnimationDuration: 3000,\n                    enterEasingFunction: ['Bounce', 'InOut'],\n                    exitAnimationDuration: 3000,\n                    exitEasingFunction: ['Cubic', 'Out'],\n                    getTooltipContent: marker => `${marker.city} (Sales: ${marker.value}.0M)`,\n                    radiusScaleRange: [0.01, 0.05],\n                  }}\n                \n                />\n            </div>\n        );\n    }\n}\n\nexport default Globe;","import React from 'react';\nimport Globe from './uiComponents/globe/globe.js';\n\nimport './App.css';\n\nclass App extends React.Component{\n\n  render(){\n    return(\n      <div> \n        <Globe />\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}